// Test PRR-slowstart implementation.
// In this variant we verify that the sender uses SACK info on an ACK
// below snd_una.
// This variant tests behavior with Reno congestion control.

`sysctl -q net.ipv4.tcp_congestion_control=reno`

// Establish a connection.
0.000 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
0.000 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
0.000 bind(3, ..., ...) = 0
0.000 listen(3, 1) = 0

0.100 < S 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
0.100 > S. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK,nop,wscale 6>
// RTT 100ms
0.200 < . 1:1(0) ack 1 win 320
0.200 accept(3, ..., ...) = 4

// Send 10 data segments.
0.200 write(4, ..., 10000) = 10000
0.200 > P. 1:10001(10000) ack 1

// Lost packet 1:1001,4001:5001,7001:8001.
// Lots of reordering in both directions.
0.310 < . 1:1(0) ack 1 win 320 <sack 1001:2001,nop,nop>
0.320 < . 1:1(0) ack 1 win 320 <sack 1001:3001,nop,nop>
0.330 < . 1:1(0) ack 1 win 320 <sack 1001:3001 8001:9001,nop,nop>
// Enter fast recovery.
0.330 > . 1:1001(1000) ack 1
0.330 > . 3001:4001(1000) ack 1

// An ACK advances snd_una.
0.440 < . 1:1(0) ack 4001 win 320 <sack 8001:9001,nop,nop>
0.440 > . 4001:5001(1000) ack 1
0.440 > . 5001:6001(1000) ack 1

// The following ACK was reordered - delayed so that it arrives with
// an ACK field below snd_una. Here we check that the newly-SACKed
// 2MSS at 5001:7001 cause us to send out 1 more MSS.
0.450 < . 1:1(0) ack 3001 win 320 <sack 5001:7001,nop,nop>
0.450 > . 7001:8001(1000) ack 1

// Receiver ACKs all data.
0.560 < . 1:1(0) ack 10001 win 320

// Write another 10 MSS, of which 5MSS (cwnd=ssthresh) should go out:
0.600 write(4, ..., 10000) = 10000
0.600 > . 10001:15001(5000) ack 1

0.700 `sysctl -q net.ipv4.tcp_congestion_control=cubic`
