{
  "comments": [
    {
      "key": {
        "uuid": "a760cd77_43a1f377",
        "filename": "Makefile",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T15:24:49Z",
      "side": 1,
      "message": "guys, are you aware that with that patch tldk build ignores RTE_ env vars and always tries to download and build local DPDK instance?",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e0430ec_128c734d",
        "filename": "Makefile",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T15:26:50Z",
      "side": 1,
      "message": "Apart from that it  creates libtldk.a in TLDK root dir.\nThat\u0027s way too messy.",
      "parentUuid": "a760cd77_43a1f377",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdd5758e_a8528d53",
        "filename": "Makefile",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T15:29:20Z",
      "side": 1,
      "message": "and make all fails on ubuntu 18.04 with:\n-- repack libtldk.a ---\nlibrte_mempool_stack.a\nlibrte_ethdev.a\nlibrte_kvargs.a\nlibrte_pci.a\nlibrte_hash.a\nlibrte_pdump.a\nlibrte_bus_vdev.a\nlibrte_bus_pci.a\nlibrte_mbuf.a\nlibrte_pmd_virtio.a\nlibrte_pmd_ring.a\nlibrte_eal.a\nlibrte_ip_frag.a\nlibrte_timer.a\nlibrte_metrics.a\nlibrte_gro.a\nlibrte_net.a\nlibrte_mempool.a\nlibrte_mempool_ring.a\nlibrte_cmdline.a\nlibrte_ring.a\nlibtle_l4p.a\nlibtle_misc.a\nlibtle_timer.a\nlibtle_glue.a\nlibtle_dring.a\nar: `u\u0027 modifier ignored since `D\u0027 is the default (see `U\u0027)\n/usr/bin/ld: /local/kananye1/tldk.fdio.1906u1/x86_64-native-linuxapp-gcc/lib/libtle_glue.a(init.o): relocation R_X86_64_PC32 against symbol `glue_init1\u0027 can not be used when making a shared object; recompile with -fPIC\n/usr/bin/ld: final link failed: Bad value\ncollect2: error: ld returned 1 exit status\nMakefile:64: recipe for target \u0027libtldk.so\u0027 failed\nmake: *** [libtldk.so] Error 1",
      "parentUuid": "4e0430ec_128c734d",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2f1fa36_bb85b6e9",
        "filename": "Makefile",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1754
      },
      "writtenOn": "2019-06-12T15:34:54Z",
      "side": 1,
      "message": "Yes, we\u0027d better put the libtldk.a into $TARGET/lib",
      "parentUuid": "4e0430ec_128c734d",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20560c77_e9c165c8",
        "filename": "Makefile",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1754
      },
      "writtenOn": "2019-06-12T15:34:54Z",
      "side": 1,
      "message": "try this:\nmake EXTRA_CFLAGS\u003d\"-fPIC\" all\n\nIf you agree, we can put this flag into mk.",
      "parentUuid": "fdd5758e_a8528d53",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d957a90_5ff4d23e",
        "filename": "Makefile",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1754
      },
      "writtenOn": "2019-06-12T15:34:54Z",
      "side": 1,
      "message": "It always checks .download.ok, .patch.ok, ..., but not always really do the download, patch, rebuild.",
      "parentUuid": "a760cd77_43a1f377",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f176ffb_02a199ee",
        "filename": "Makefile",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T16:22:13Z",
      "side": 1,
      "message": "The first question is - what you guys trying to do here and why?",
      "parentUuid": "d2f1fa36_bb85b6e9",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "837fb528_0a504e0b",
        "filename": "lib/libtle_l4p/event.c",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T18:07:27Z",
      "side": 1,
      "message": "that seems way too expensive.\nAs I remember each socket needs 3 events, so up to 3 malloc calls.\nthat could happen at the datapath.\nAt least need someting similar with delta, as for streams.\nThough I think better would be return ENOMEM to the upper layer and let it decide\ndoes it want to allocate another chunk or not.",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8908a53_4fecbf73",
        "filename": "lib/libtle_l4p/event.c",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T18:07:27Z",
      "side": 1,
      "message": "h-\u003estate value is undefined here.",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c122d659_14de0795",
        "filename": "lib/libtle_l4p/stream_table.c",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T16:17:17Z",
      "side": 1,
      "message": "that flag was instroduced only in 18.11\nwith all previous versions of dpdk it would fail.",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3771cba3_18739b9e",
        "filename": "lib/libtle_l4p/tcp_rxtx.c",
        "patchSetId": 2
      },
      "lineNbr": 2351,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T16:22:13Z",
      "side": 1,
      "message": "as I can see it is defined it libtle_glue...\nSo you create implicit dependecy between libs here.\nSuch construction looks bogus to me.",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82adc948_7defbfc5",
        "filename": "lib/libtle_l4p/tcp_rxtx.c",
        "patchSetId": 2
      },
      "lineNbr": 2562,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T18:07:27Z",
      "side": 1,
      "message": "why to crash if tx send buffer is full?",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "518d28cb_18853797",
        "filename": "lib/libtle_l4p/tcp_stream.c",
        "patchSetId": 2
      },
      "lineNbr": 168,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T22:33:57Z",
      "side": 1,
      "message": "at least that part (size caluclation and alloc()) - can be done:\n1. once per bulk\n2. probably before grabbing the streams.lock",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c35d95fb_7f184ffa",
        "filename": "lib/libtle_l4p/tcp_stream.c",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T18:07:27Z",
      "side": 1,
      "message": "so for each dynamic stream we have one rte_zmalloc() , 3 snprintf() and few other calls. \nSeems quite expensive for the data-path.\nAll that with grabbed ctx-\u003estreams.lock, so all other open/close/accept for that ctx\nwill be blocked too.\nWhat we probably need - analog to mempool that could grow/shrink dynamically \nby predefined chunks.\nThen we could use it for both streams and events.\nAlso might be better to leave the decision when to alloc/free extra chunk to the upper layer.",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba44c8d2_d8dae5dd",
        "filename": "lib/libtle_l4p/tcp_tx_seg.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-11T23:29:30Z",
      "side": 1,
      "message": "any reason for that?",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4ca7a1f_e07a36ff",
        "filename": "lib/libtle_l4p/tcp_tx_seg.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1754
      },
      "writtenOn": "2019-06-12T07:38:21Z",
      "side": 1,
      "message": "Refer to man 2 send, send failure due to full send buffer shall return EAGAIN, instead of ENOSPC.",
      "parentUuid": "ba44c8d2_d8dae5dd",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5092906c_78e5cfb6",
        "filename": "lib/libtle_l4p/tcp_tx_seg.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T09:42:31Z",
      "side": 1,
      "message": "man -s 2 send\n...\n EAGAIN or EWOULDBLOCK\n              The  socket  is  marked  nonblocking and the requested operation\n              would block.  POSIX.1-2001 allows either error  to  be  returned\n              for  this case, and does not require these constants to have the\n              same value, so a portable application should check for both posâ\n              sibilities.\n\n       EAGAIN (Internet  domain  datagram  sockets)  The socket referred to by\n              sockfd had not previously been bound to  an  address  and,  upon\n              attempting  to  bind  it to an ephemeral port, it was determined\n              that all port numbers in the ephemeral port range are  currently\n              in        use.         See        the        discussion       of\n              /proc/sys/net/ipv4/ip_local_port_range in ip(7).\n\n\nDoesn\u0027t look to me like that refer to our situation.\nIn fact this is not the send buffer, this is our internal limitaion:\ntle_tcp_stream_send(...)\n{\n   struct rte_mbuf *segs[TCP_MAX_PKT_SEG];\n    ...\n     rc \u003d tcp_segmentation(pkt[i], segs, RTE_DIM(segs),\n                                \u0026s-\u003etx.dst, mss);\n\nSo not sure what is an appropriate value in that case, might be EMSGSIZE.",
      "parentUuid": "c4ca7a1f_e07a36ff",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0e821f9_77d4a9d9",
        "filename": "lib/libtle_l4p/tcp_tx_seg.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1759
      },
      "writtenOn": "2019-06-12T12:33:09Z",
      "side": 1,
      "message": "Here has been modified to support tso.\nLike:\n\tfree_slots \u003d rte_ring_free_count(s-\u003etx.q);\n\tfree_slots \u003d RTE_MIN(free_slots, RTE_DIM(segs));\n\trc \u003d tcp_segmentation(pkt[i], segs, free_slots,\n\t\t\t\u0026s-\u003etx.dst, mss);\n\nSo the reason of failure here is lack of space in send buffer. Therefore EAGAIN is returned.",
      "parentUuid": "5092906c_78e5cfb6",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "704f580b_f979f0a2",
        "filename": "lib/libtle_l4p/tcp_tx_seg.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T12:40:00Z",
      "side": 1,
      "message": "Didn\u0027t see that change yet, but...\nfree_slots still can\u0027t be bigger then RTE_DIM(segs), right?\nSo it is still our internal limitation in some cases.\nBTW, even if we talking situation when send buffer is full, I am not sure EAGAIN is appopriate.\nSee citation from man send above.",
      "parentUuid": "f0e821f9_77d4a9d9",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f36a1f29_074d571a",
        "filename": "lib/libtle_l4p/tle_event.h",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T18:07:27Z",
      "side": 1,
      "message": "probably better just add extra parameter (state) to the tle_evq_get()",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4c594a7_32d5908e",
        "filename": "lib/libtle_l4p/tle_stats.h",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T18:07:27Z",
      "side": 1,
      "message": "I think there should be a way to disable this stats collection.\nAt least at config/build time, better dynamic.",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac577160_dc89606c",
        "filename": "lib/libtle_l4p/tle_stats.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 118
      },
      "writtenOn": "2019-06-12T18:07:27Z",
      "side": 1,
      "message": "if you using TLS variable, why do you need atomic updates?",
      "revId": "2ac944fec10daa33a806d98c24b36626987137b5",
      "serverId": "6d2eb258-4fe2-443e-8a38-ca81da23d4c2",
      "unresolved": true
    }
  ]
}